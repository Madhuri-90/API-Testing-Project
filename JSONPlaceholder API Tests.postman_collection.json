{
	"info": {
		"_postman_id": "2f40fcbb-e794-4c75-ab57-57c81ebb3c4e",
		"name": "JSONPlaceholder API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43561892"
	},
	"item": [
		{
			"name": "Post",
			"item": [
				{
					"name": "Get All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Array contains 100 posts\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Each post has required keys\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const keys = [\"userId\", \"id\", \"title\", \"body\"];\r",
									"    pm.expect(jsonData[0]).to.include.all.keys(keys);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a single post object\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData).to.have.property(\"id\", 1);\r",
									"});\r",
									"\r",
									"pm.test(\"Post has required keys\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.all.keys(\"userId\", \"id\", \"title\", \"body\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post by Invalid ID - 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for invalid ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql('{}');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post by Invalid ID - abc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 for non-numeric ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty object\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql('{}');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/abc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"abc"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Non-existent Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is empty object\", function () {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(_.isEmpty(body)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/555",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"555"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id, title, body, and userId\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"id\");\r",
									"    pm.expect(res).to.have.property(\"title\", \"API Testing\");\r",
									"    pm.expect(res).to.have.property(\"body\", \"Learning how to send POST requests.\");\r",
									"    pm.expect(res).to.have.property(\"userId\", 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"title\": \"API Testing\",\r\n    \"body\": \"Learning how to send POST requests.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Missing Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has an id\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"body\": \"This post has no title.\",\r\n  \"userId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Missing Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains id, title, and userId\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"id\");\r",
									"    pm.expect(res).to.have.property(\"title\", \"Post without body\");\r",
									"    pm.expect(res).to.have.property(\"userId\", 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Post without body\",\r\n    \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains id\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Extra Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes id and all sent fields\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"id\");\r",
									"    pm.expect(res).to.have.property(\"extra1\", \"value1\");\r",
									"    pm.expect(res).to.have.property(\"extra2\", \"value2\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Post with extra fields\",\r\n    \"body\": \"This post includes additional unexpected fields.\",\r\n    \"userId\": 1,\r\n    \"extra1\": \"value1\",\r\n    \"extra2\": \"value2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Invalid Data Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains id and numeric fields\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"id\");\r",
									"    pm.expect(res).to.have.property(\"title\", 12345);\r",
									"    pm.expect(res).to.have.property(\"body\", 67890);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": 12345,\r\n  \"body\": 67890,\r\n  \"userId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated title\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"title\", \"Updated title only\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Updated title only\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Body Only",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Empty Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Invalid Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response only contains id (fields not updated)\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"id\", 1);\r",
									"    pm.expect(Object.keys(res).length).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": 12345,\r\n  \"body\": true,\r\n  \"userId\": \"invalid\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Simulated New Post (Boundary ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response returns updated content\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.title).to.eql(\"Simulating PUT for test boundary\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Simulating PUT for test boundary\",\r\n  \"body\": \"This mimics an update on a post assumed to be non-existent\",\r\n  \"userId\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"100"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Missing Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains only updated fields\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.title).to.eql(\"Only title updated\");\r",
									"    pm.expect(res).to.have.property(\"id\", 1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Only title updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Extra Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes extra fields\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.title).to.eql(\"Updated title with extras\");\r",
									"    pm.expect(res.body).to.eql(\"Updated body with extras\");\r",
									"    pm.expect(res).to.have.property(\"extraField1\", \"unexpected\");\r",
									"    pm.expect(res).to.have.property(\"metadata\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Updated title with extras\",\r\n    \"body\": \"Updated body with extras\",\r\n    \"userId\": 1,\r\n    \"extraField1\": \"unexpected\",\r\n    \"metadata\": {\r\n        \"flag\": true\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Valid Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty JSON object\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.eql({});\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Invalid Post ID (0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty or {}\", () => {\r",
									"    const resBody = pm.response.text().trim();\r",
									"    pm.expect(resBody === \"{}\" || resBody === \"\").to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Post with String ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty or {}\", () => {\r",
									"    const body = pm.response.text().trim();\r",
									"    pm.expect(body === \"{}\" || body === \"\").to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/abc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"abc"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Non-existent Post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is empty JSON object\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.eql({});\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts Response Time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is under 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts Content-Type Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Response Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response contains expected keys\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.all.keys(\"userId\", \"id\", \"title\", \"body\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		}
	]
}